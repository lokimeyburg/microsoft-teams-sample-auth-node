<!--
// Copyright (c) Microsoft Corporation
// All rights reserved.
//
// MIT License:
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject to
// the following conditions:
//
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-->

<html>
    <head>
        <title>Simple Authentication Sample</title>
    </head>
    <body>
        <p>
            This sample shows the basics of an authentication/authorization flow in a Microsoft Teams tab.
        </p>
        <p>
            Click on the "Login" button below to login to Azure AD, and grant the sample app access to your profile information.
            The app will fetch your profile using Microsoft Graph, and display information about you below. 
        </p>

        <!-- Login button -->
        <button onclick="loginV1()">Login to Azure AD</button>
        <button onclick="loginV2()">Login to Azure AD (V2 endpoint)</button>
        <button id="promptForConsentButton" onclick="loginV2()" disabled>Grant Permission</button>

        <!-- Result -->
        <p>
            <div id="divError" style="display: none"></div>
            <div id="divProfile" style="display: none">
                <div><b>Name:</b> <span id="profileDisplayName"/></div>
                <div><b>Job title:</b> <span id="profileJobTitle"/></div>
                <div><b>E-mail:</b> <span id="profileMail"/></div>
                <div><b>UPN:</b> <span id="profileUpn"/></div>
                <div><b>Object id:</b> <span id="profileObjectId"/></div>
            </div>
        </p>

        <!-- Logs -->
        <div id="logs"></div>

        <script src="https://code.jquery.com/jquery-3.1.1.js" integrity="sha384-VC7EHu0lDzZyFfmjTPJq+DFyIn8TUGAJbEtpXquazFVr00Q/OOx//RjiZ9yU9+9m" crossorigin="anonymous"></script>
        <script src="https://unpkg.com/@microsoft/teams-js@1.4.2/dist/MicrosoftTeams.min.js" integrity="sha384-DcoNUuQTjpW5Sw3msonn/2ojgtNvtC5fCGd5U9RUpL3g1hla1LzHz8I9YIYSXe6q" crossorigin="anonymous"></script>
        <script src="https://secure.aadcdn.microsoftonline-p.com/lib/1.0.17/js/adal.min.js" integrity="sha384-BIOS/65fbAsb2XiCCSTlZSTTl0ZgqkOU522dpyk5meOnN2EOQ3uH+QpqEtoAtmBn" crossorigin="anonymous"></script>        

        <script type="text/javascript">
            microsoftTeams.initialize();

            // 1. Get auth token
            // Ask Teams to get us a token from AAD, we should then exchange it server-side
            function getAuthToken(){
                // Get auth token
                var authTokenRequest = {
                    successCallback: (result) =>  {
                        sendTokenToBackend(result);
                    },
                    failureCallback: function(error) { 
                        printLog("Error getting token: " + error);
                    },
                };

                microsoftTeams.authentication.getAuthToken(authTokenRequest);
            }

            // 2. Send token to the backend
            // After we call getAuthToken, we need to send the token from that request to the backend to 
            // verify that we have the correct permissions (or do an on-behalf-of exchange to get a new token) 
            function sendTokenToBackend(result){
                printLog("Token received: " + result)
                printLog("Sending token to backend for AAD on-behalf-of exchange")

                // Get Tenant ID
                var getContextPromise = new Promise((resolve, reject) => {
                    microsoftTeams.getContext(function(context){
                        resolve(context);
                    });
                });

                // Send Tenant ID and token to backend
                getContextPromise.then(function(context) {
                    // POST result to backend
                    var xhr = new XMLHttpRequest();
                    xhr.open("POST", "/auth/token", true);
                    xhr.setRequestHeader('Content-Type', 'application/json');
                    // Set response handler before sending
                    xhr.onreadystatechange = function () {
                        if (this.readyState != 4) return;
                        if (this.status == 200) {
                            var data = JSON.parse(this.responseText);
                            handleServerResponse(data);
                        }
                    };
                    // send POST request
                    xhr.send(JSON.stringify({ "tid": context.tid, "token": result })); 
                });
            }


            // 3. Ask for additional consent from the user
            // If the on-behalf-of-flow failed due to requiring further consent, then we need to have the
            // user click a button to show the AAD consent dialog and ask for additional permission
            function initializeConsentButton(){
                var btn = document.getElementById("promptForConsentButton");
                btn.onclick = () => {
                    microsoftTeams.authentication.authenticate({
                        url: window.location.origin + "/tab/simple-start-v2",
                        width: 600,
                        height: 535,
                        successCallback: function (result) {
                            let data = localStorage.getItem(result);
                            localStorage.removeItem(result);
                            printLog("Success! Additional permission granted. Result: " + data);
                            let tokenResult = JSON.parse(data);
                            sendTokenToBot(tokenResult.accessToken);
                        },
                        failureCallback: function (reason) {
                            printLog("Failure. Additional permission was not granted. Result: " + JSON.stringify(reason))
                            handleAuthError(reason);
                        }
                    });
                }
            }

            // ------------------------------------------------------------------------

            function printLog(msg) {
                var logDiv = document.getElementById('logs');
                var p = document.createElement("p");
                logDiv.prepend(msg, p);
            }

            function handleServerResponse(data) {
                printLog("Backend returned: " + JSON.stringify(data));
                var error = data.error;
                // Error: enable the grantPermission button
                if (error != null) {
                    printLog("Enabling the 'Grant Permission' button");
                    document.getElementById("promptForConsentButton").disabled = false
                // Success: server returned a valid acess token
                } else {
                    printLog("Success! You have a valid token from your backend with extra permissions.");
                    sendTokenToBot(data.access_token);
                }
            }

            function sendTokenToBot(accessToken) {
                let queryParams = {};
                let stateParams = {};
                let redirectURI = "";

                // Use the authorizationURL query-string-parameter to determine where to send the user 
                let s = location.search.substr(1).split("&")[0].split("=");
                k = s[0];
                v = s[1] && decodeURIComponent(s[1]);
                queryParams[k] = v;

                if (queryParams != null && queryParams.authorizationUrl != null) {
                    queryParams.authorizationUrl.split("&").forEach(function(item) {
                        let s = item.split("="),
                        k = s[0],
                        v = s[1] && decodeURIComponent(s[1]);
                        stateParams[k] = v;
                    });
                    // Get the state key of the decoded authorizationUrl
                    redirectURI = stateParams.redirect_uri;
                    stateParams = stateParams.state;
                    if (stateParams != null) {
                        stateParams = JSON.parse(stateParams);
                    }
                } else {
                    return;
                }
                // include the accessToken that we received from the backend
                redirectURI = redirectURI + "?accessToken=" + accessToken + "&state=" + JSON.stringify(stateParams);
                
                window.location.href = redirectURI;
            }

            // Start authentication
            printLog("Starting...");
            printLog("Getting auth token...");
            initializeConsentButton();
            getAuthToken();

            // ----------------------------------------------------------------------

            // Login to Azure AD and get access to Microsoft Graph
            function login(url) {
                hideProfileAndError(); 

                microsoftTeams.authentication.authenticate({
                    url: url,
                    width: 600,
                    height: 535,
                    successCallback: function (result) {
                        console.log("Login succeeded: " + result);

                        let data = localStorage.getItem(result);
                        localStorage.removeItem(result);
                        
                        let tokenResult = JSON.parse(data);
                        getUserProfile(tokenResult.accessToken);
                    },
                    failureCallback: function (reason) {
                        console.log("Login failed: " + reason);
                        handleAuthError(reason);
                    }
                });
            }

            function loginV1() {
                login(window.location.origin + "/tab/simple-start");
            }

            function loginV2() {
                login(window.location.origin + "/tab/simple-start-v2");
            }

            // Get the user's profile information from Microsoft Graph
            function getUserProfile(accessToken) {
                $.ajax({
                    url: "https://graph.microsoft.com/v1.0/me/",
                    beforeSend: function(request) {
                        request.setRequestHeader("Authorization", "Bearer " + accessToken);
                    },
                    success: function (profile) {
                        $("#profileDisplayName").text(profile.displayName);
                        $("#profileJobTitle").text(profile.jobTitle);
                        $("#profileMail").text(profile.mail);
                        $("#profileUpn").text(profile.userPrincipalName);
                        $("#profileObjectId").text(profile.id);
                        $("#divProfile").css({ display: "" });
                        $("#divError").css({ display: "none" });
                    },
                    error: function (xhr, textStatus, errorThrown) {
                        console.log("textStatus: " + textStatus + ", errorThrown:" + errorThrown);
                        $("#divError").text(errorThrown).css({ display: "" });
                        $("#divProfile").css({ display: "none" });
                    },
                });
            }

            // Show error information
            function handleAuthError(reason) {
                $("#divError").text(reason).css({ display: "" });
                $("#divProfile").css({ display: "none" });
            }

            // Clear all information in tab
            function hideProfileAndError() {
                $("#divError").text("").css({ display: "none" });
                $("#divProfile").css({ display: "none" });
            }
        </script>
    </body>
</html>
